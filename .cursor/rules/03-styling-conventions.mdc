---
description: 
globs: 
alwaysApply: false
---
# Styling Conventions

## Brand Colors

The project uses consistent brand colors throughout:

- **Primary Brand Blue**: `#194a8f` - Used for primary buttons, links, and brand elements
- **Primary Hover**: `#143a7a` - Darker shade for hover states
- **Light Brand Blue**: `#e6f1ff` - Custom light background for icons and accents
- **Success Green**: `#22c55e` - For success states and positive indicators
- **Warning Yellow**: `#eab308` - For warnings and caution states
- **Error Red**: `#ef4444` - For errors and destructive actions

**NEVER use generic Tailwind blue classes (blue-100, blue-500, blue-600, blue-700, etc.)**
**ALWAYS use the exact brand hex values above**

Example usage:
```tsx
// ✅ DO: Primary button with brand colors
<button className="bg-[#194a8f] hover:bg-[#143a7a] text-white">Primary Action</button>

// ✅ DO: Primary link with brand colors
<a className="text-[#194a8f] hover:text-[#143a7a]">Learn more</a>

// ✅ DO: Icon background with light brand blue
<div className="bg-[#e6f1ff] rounded-full w-10 h-10 flex items-center justify-center">
  <Icon className="text-[#194a8f] w-6 h-6" />
</div>

// ❌ DON'T: Generic Tailwind blue classes
<button className="bg-blue-600 hover:bg-blue-700">Primary Action</button>
<a className="text-blue-600">Learn more</a>
<div className="bg-blue-100">Icon container</div>
```

## Interactive Element Patterns

**Add/Remove Action Links:**
- Use "+" prefix for add actions: `+ ADD NEW ITEM`
- Apply brand blue color with hover states
- Use medium font weight and small text size

```tsx
// ✅ DO: Add action link pattern
<button 
  onClick={() => setShowForm(true)}
  className="flex items-center gap-2 text-[#194a8f] hover:text-[#143a7a] font-medium text-sm"
>
  <span className="text-lg">+</span>
  ADD NEW ADULT
</button>

// ✅ DO: Remove button with brand colors
<button className="ml-4 bg-[#194a8f] text-white rounded px-3 py-1.5 text-xs font-medium hover:bg-[#143a7a]">
  Remove
</button>

// ✅ DO: Add button with outline style
<button className="ml-4 border border-[#194a8f] text-[#194a8f] rounded px-3 py-1.5 text-xs font-medium hover:bg-[#194a8f] hover:text-white">
  Add
</button>
```

**Icon Container Pattern:**
- Use light brand blue background for icon containers
- Apply brand blue color to icons themselves
- Consistent sizing: `w-10 h-10` for containers, `w-6 h-6` for icons

```tsx
// ✅ DO: Consistent icon container styling
<div className="bg-[#e6f1ff] rounded-full w-10 h-10 flex items-center justify-center">
  <CalendarIcon className="text-[#194a8f] w-6 h-6" />
</div>
```

## Form Styling Patterns

Forms use shadcn UI components with consistent compact styling:

- **Form Inputs**: Always use `h-8 text-sm` for compact appearance
- **Form Labels**: Use `text-xs font-medium text-gray-700 mb-1` for consistent labeling
- **Form Spacing**: Use `gap-3` for form grids, `mb-3` for section spacing
- **Save/Cancel Buttons**: Small size with `px-3 py-1.5 text-xs font-medium rounded-md`

Example form pattern:
```tsx
<div className="grid grid-cols-1 md:grid-cols-3 gap-3">
  <div>
    <Label className="text-xs font-medium text-gray-700 mb-1">Field Name</Label>
    <Input className="h-8 text-sm" placeholder="Example input" />
  </div>
</div>

// Action buttons
<div className="flex gap-3">
  <button className="px-3 py-1.5 bg-[#194a8f] text-white text-xs font-medium rounded-md hover:bg-[#143a7a]">
    Save
  </button>
  <button className="px-3 py-1.5 border border-gray-300 text-gray-700 text-xs font-medium rounded-md hover:bg-gray-50">
    Cancel
  </button>
</div>
```

## Tailwind CSS

The project uses Tailwind CSS for styling with the following conventions:

- Class names are applied using the `className` prop
- The `cn()` utility from [utils.ts](mdc:src/lib/utils.ts) is used for conditional classes
- Shadcn UI components have consistent styling patterns

Example from [button.tsx](mdc:src/components/ui/button.tsx):

```tsx
<Comp
  className={cn(buttonVariants({ variant, size, className }))}
  ref={ref}
  {...props}
/>
```

## Class Organization

- Classes are organized by purpose (layout → sizing → spacing → colors → etc.)
- Use responsive prefixes (sm:, md:, lg:) for responsive design
- Extract commonly used class combinations into variables when appropriate

Example of class organization:

```tsx
<div className="
  flex flex-col lg:flex-row    /* Layout */
  w-full max-w-screen-xl      /* Sizing */
  p-4 gap-3                   /* Spacing */
  bg-white rounded-lg          /* Colors and shape */
  shadow-sm                    /* Effects */
  transition-all duration-300  /* Animation */
">
```

## Component Variants

UI component variants are defined using `class-variance-authority` (cva) as seen in [button.tsx](mdc:src/components/ui/button.tsx):

```tsx
const buttonVariants = cva(
  "inline-flex items-center justify-center...",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        // other variants...
      },
      size: {
        default: "h-10 px-4 py-2",
        // other sizes...
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)
```

---
description: Enforces pixel-perfect layout, alignment, and styling for Flight Details Card (timeline, amenities, baggage info)
globs: src/components/trip-detail/FlightDetails.tsx
alwaysApply: true
---

- **Flight Details Card UI (Pixel-Perfect)**
  - Timeline (vertical line and dots):
    - Top dot container height: 32px; bottom dot: 48px
    - Vertical line: `top: 20px; bottom: 28px; width: 2px; background: #D1D5DB`
    - Dots must be perfectly center-aligned with departure/arrival times
    - Example:
      ```tsx
      <div className="relative flex flex-col items-center mr-4" style={{ minWidth: 16 }}>
        <div style={{ height: 32 }}><div className="w-2 h-2 rounded-full bg-gray-400" /></div>
        <div className="absolute left-1/2 -translate-x-1/2" style={{ top: 20, bottom: 28, width: '2px', background: '#D1D5DB' }} />
        <div style={{ height: 48 }}><div className="w-2 h-2 rounded-full bg-gray-400" /></div>
      </div>
      ```
  - Amenities icons:
    - Use PNGs from `/public/icons/` (wifi.png, power.png, entertainment.png, baby.png, meal.png)
    - All icons: `w-4 h-4 rounded-md bg-white object-contain`
    - Left-aligned with duration text
    - Example:
      ```tsx
      <img src="/icons/wifi.png" alt="Wi-Fi" className="w-4 h-4 rounded-md bg-white object-contain" />
      ```
  - Baggage info:
    - Two lines: "Cabin Baggage : 7kg per adult", "Check-in Baggage : 15kg per adult"
    - Right-aligned: `items-end text-right` on column, `justify-end` on row
    - Font weight: both value and 'per adult' are bold
    - Example:
      ```tsx
      <div className="flex flex-col gap-1 min-w-[180px] items-end text-right">
        <div className="flex items-center text-gray-500 text-[10px]">...<span className="font-bold">7kg</span><span className="font-bold">per adult</span></div>
        <div className="flex items-center text-gray-500 text-[10px]">...<span className="font-bold">15kg</span><span className="font-bold">per adult</span></div>
      </div>
      ```
  - Padding and spacing:
    - Use `py-[0.65rem]` for vertical padding on amenities/baggage row
    - Card uses `p-4` (1rem) for overall padding
  - **Reference:** [FlightDetails.tsx](mdc:src/components/trip-detail/FlightDetails.tsx)
  - **Cross-reference:** [08-visual-preservation-mandate.mdc](mdc:.cursor/rules/08-visual-preservation-mandate.mdc)
  - **DO:**
    - Match Figma/screenshots pixel-perfectly
    - Use only approved icon assets and sizing
    - Keep alignment and spacing consistent
  - **DON'T:**
    - Use SVGs for amenities icons in this card
    - Change padding, alignment, or font sizes without design approval

---
description: Enforces sticky layout conventions for steps cards and sidebars in booking/checkout flows
globs: src/components/Booking/BookingPage.tsx
alwaysApply: true
---

- **Sticky UI Layout (Steps Card & Sidebar)**
  - Steps/progress card at the top of booking/checkout pages must use `sticky` positioning to remain visible while scrolling
    - Use Tailwind: `sticky top-0 z-30` (adjust `top-*` for header height if needed)
    - Place sticky class on the outer wrapper of the steps card, not the inner content
    - Example:
      ```tsx
      <div className="mt-8 sticky top-0 z-30">
        <HorizontalProgressBar ... />
      </div>
      ```
  - Sidebar (Fare summary, coupon, etc.) must also be sticky in desktop layouts
    - Use Tailwind: `sticky top-28 z-20` (adjust `top-*` to sit below steps card)
    - Add `self-start` to sidebar container in flex layouts to ensure correct alignment
    - Example:
      ```tsx
      <div className="w-full md:w-[300px] flex-shrink-0 self-start">
        <aside className="w-full max-w-xs sticky top-28 z-20">...</aside>
      </div>
      ```
  - **DO:**
    - Test sticky behavior in all supported browsers
    - Adjust `top-*` values to account for fixed headers/other sticky elements
    - Keep sticky elements within scrollable containers (avoid `overflow: hidden/auto` on parents)
  - **DON'T:**
    - Place sticky elements inside containers with `overflow: hidden/auto/scroll`
    - Use sticky on elements that are not direct children of the scrollable area
    - Forget to add `self-start` in flex layouts for vertical alignment
  - **Reference:** [BookingPage.tsx](mdc:src/components/Booking/BookingPage.tsx)
